{"version":3,"sources":["..\\scss\\bootstrap-steps.scss","..\\node_modules\\bootstrap\\scss\\mixins\\_breakpoints.scss"],"names":[],"mappings":"AAAA;;;;AAQA,OACE,QAAA,EACA,OAAA,EACA,WAAA,KACA,QAAA,KACA,gBAAA,OACA,WAAA,KAGF,cACE,UAAA,KACA,YAAA,MCsDE,4BDxDJ,qBAMM,gBAAA,YAKN,yCAGM,QAAA,KAHN,iCASM,cAAA,EAKN,cACE,WAAA,YACA,QAAA,KACA,YAAA,OACA,eAAA,OACA,MAAA,KACA,UAAA,KACA,UAAA,KACA,cAAA,KAGF,aACE,SAAA,SACA,QAAA,KACA,gBAAA,OACA,YAAA,OACA,MAAA,OACA,OAAA,OACA,MAAA,QACA,OAAA,IAAA,MAAA,QACA,cAAA,KACA,iBAAA,KAVF,qBAaI,QAAA,GACA,QAAA,MACA,SAAA,SACA,IAAA,IACA,KAAA,KACA,MAAA,2BACA,OAAA,IACA,UAAA,sBACA,MAAA,QACA,iBAAA,aAIJ,WACE,MAAA,QACA,WAAA,UACA,WAAA,MAGF,0BAEI,MAAA,KACA,iBAAA,QACA,aAAA,QAJJ,kCAMM,MAAA,QANN,wBAUI,MAAA,QAIJ,yBAEI,MAAA,KACA,iBAAA,QACA,aAAA,QAJJ,iCAMM,MAAA,QANN,uBAUI,MAAA,QAIJ,2BAEI,MAAA,QACA,iBAAA,KACA,aAAA,QAJJ,mCAMM,MAAA,QANN,yBAUI,MAAA","sourcesContent":["/*!\r\n * Bootstrap Steps v0.1.0 (https://github.com/ycs77/bootstrap-steps)\r\n * Copyright 2019 Lucas Yang <yangchenshin77@gmail.com>\r\n * Licensed under MIT (https://github.com/ycs77/bootstrap-steps/blob/master/LICENSE)\r\n */\r\n\r\n@import \"variables\";\r\n\r\n.steps {\r\n  padding: 0;\r\n  margin: 0;\r\n  list-style: none;\r\n  display: flex;\r\n  justify-content: center;\r\n  overflow-x: auto;\r\n}\r\n\r\n.steps-scroll {\r\n  max-width: 100%;\r\n  padding-top: 0.5rem;\r\n\r\n  @include media-breakpoint-down($steps-scroll-mobile-breakpoint) {\r\n    .steps {\r\n      justify-content: flex-start;\r\n    }\r\n  }\r\n}\r\n\r\n.step {\r\n  &:first-of-type {\r\n    .step-circle::before {\r\n      display: none;\r\n    }\r\n  }\r\n\r\n  &:last-of-type {\r\n    .step-content {\r\n      padding-right: 0;\r\n    }\r\n  }\r\n}\r\n\r\n.step-content {\r\n  box-sizing: content-box;\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  width: $step-content-width;\r\n  min-width: $step-content-width;\r\n  max-width: $step-content-width;\r\n  padding-right: $step-gutter;\r\n}\r\n\r\n.step-circle {\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: $step-circle-size;\r\n  height: $step-circle-size;\r\n  color: $step-default-circle-color;\r\n  border: $step-circle-border-width solid $step-default-circle-border-color;\r\n  border-radius: 100%;\r\n  background-color: $step-default-circle-bg-color;\r\n\r\n  &::before {\r\n    content: '';\r\n    display: block;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: -$step-circle-border-width;\r\n    width: calc(#{$step-content-width} + #{$step-gutter} - #{$step-circle-size});\r\n    height: $step-circle-border-width;\r\n    transform: translate(-100%, -50%);\r\n    color: $step-default-circle-border-color;\r\n    background-color: currentColor;\r\n  }\r\n}\r\n\r\n.step-text {\r\n  color: $step-default-text-color;\r\n  word-break: break-all;\r\n  margin-top: 0.25em;\r\n}\r\n\r\n.step-active {\r\n  .step-circle {\r\n    color: $step-active-circle-color;\r\n    background-color: $step-active-circle-bg-color;\r\n    border-color: $step-active-circle-border-color;\r\n    &::before {\r\n      color: $step-active-circle-border-color;\r\n    }\r\n  }\r\n  .step-text {\r\n    color: $step-active-text-color;\r\n  }\r\n}\r\n\r\n.step-error {\r\n  .step-circle {\r\n    color: $step-error-circle-color;\r\n    background-color: $step-error-circle-bg-color;\r\n    border-color: $step-error-circle-border-color;\r\n    &::before {\r\n      color: $step-error-circle-border-color;\r\n    }\r\n  }\r\n  .step-text {\r\n    color: $step-error-text-color;\r\n  }\r\n}\r\n\r\n.step-success {\r\n  .step-circle {\r\n    color: $step-success-circle-color;\r\n    background-color: $step-success-circle-bg-color;\r\n    border-color: $step-success-circle-border-color;\r\n    &::before {\r\n      color: $step-success-circle-border-color;\r\n    }\r\n  }\r\n  .step-text {\r\n    color: $step-success-text-color;\r\n  }\r\n}\r\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}